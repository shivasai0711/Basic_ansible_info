In Ansible, the state parameter is a crucial attribute in many modules.It defines the desired state of the resource (e.g., a package, file, service) 
 on the managed node. The concept of "desired state" allows you to specify exactly how you want something to exist or behave, which makes
  Ansible playbooks idempotent. This means that re-running a playbook will not make unnecessary changes if the resource is already in the specified state.

Common state Values by Module Type
Let’s go through a few different types of modules and explain the various state
 options available:

1. Package Management Modules (e.g., apt, yum)

present: Ensures the package is installed. If it’s already installed, Ansible does nothing. If it’s not installed, Ansible installs it.
absent: Ensures the package is not installed. If it’s already installed, Ansible removes it.
Example:

yaml

- name: Ensure nginx is installed
  apt:
    name: nginx
    state: present
yaml

- name: Ensure nginx is removed
  yum:
    name: nginx
    state: absent

2. Service Management Modules (e.g., service)

started: Ensures the service is running. If it’s already running,Ansible does nothing. If it’s not running, Ansible starts it.

stopped: Ensures the service is stopped. If it’s already stopped,Ansible does nothing. If it’s running, Ansible stops it.

restarted: Restarts the service. This is not idempotent by itself;it will restart the service every time the playbook runs.

reloaded: Reloads the service if supported, typically 

Example:

yaml

- name: Ensure nginx service is running
  service:
    name: nginx
    state: started
    enabled: yes  # Also ensures the service starts on boot

3. File Management Modules (e.g., file)

directory: Ensures that the specified path exists as a directory. If it doesn’t exist, Ansible creates it as a directory.

file: Ensures that the specified path exists as a file. If it doesn’t exist,
 Ansible creates an empty file.

link: Creates a symbolic link at the specified path, pointing to a defined target.

absent: Ensures that the specified path does not exist (whether it’s a file, directory, or link). Ansible will delete it if it exists.

Example:

yaml

- name: Ensure /var/www directory exists
  file:
    path: /var/www
    state: directory

- name: Ensure /tmp/example.txt does not exist
  file:
    path: /tmp/example.txt
    state: absent

4. User Management Modules (e.g., user)

present: Ensures the user account exists. If it already exists,Ansible does nothing. If it doesn’t exist, Ansible creates it.
absent: Ensures the user account does not exist. If it exists, Ansible removes it.
Example:

yaml

- name: Ensure the user 'john' exists
  user:
    name: john
    state: present
5. Copy and Template Modules (e.g., copy, template)

present (for copy and template): Ensures the specified file exists 
at the destination. If a different version of the file exists,
 Ansible replaces it with the specified file.

absent: Ensures that the file does not exist at the destination.
 If it does, Ansible deletes it.
Example:

yaml

- name: Copy a file to the server
  copy:
    src: /local/path/to/file.conf
    dest: /remote/path/to/file.conf
    state: present

- name: Ensure the file /tmp/unwanted_file is removed
  file:
    path: /tmp/unwanted_file
    state: absent
Key Points
Idempotency: Ansible checks the current state of the resource 
and only makes changes if needed to achieve the desired state.
 This way, re-running a playbook won’t produce different results 
 unless there is a change in the target.
 
Explicit Control: Using state in tasks allows you to be precise about
 how resources should be managed on the target systems.
