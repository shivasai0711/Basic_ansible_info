Step 10: Ansible Loops
Ansible loops allow you to repeat tasks for multiple items (like files, packages, or users) without having to write repetitive code. Instead of specifying each item individually, you can use a loop to execute a task for a list of items.

Types of Loops in Ansible
Basic Loop (with_items)
Loop with Dictionaries (with_dict)
Loop with a Range (loop with range)
Loop with a List of Dictionaries
Looping over Files and Directories
Let's go through each one in detail.

1. Basic Loop (with_items)
The with_items loop allows you to iterate over a list of items, such as package names, file names, or user names.

Example:

yaml
Copy code
- name: Install multiple packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - nginx
    - curl
    - git
with_items: The task will be repeated for each item in the list.
In the example above, Ansible installs nginx, curl, and git one after the other.
2. Loop with Dictionaries (with_dict)
If you want to loop over a dictionary of key-value pairs, you can use with_dict. This is useful when you need to create multiple items based on both a key and a value.

Example:

yaml
Copy code
- name: Add multiple users with different properties
  user:
    name: "{{ item.key }}"
    state: present
    shell: "{{ item.value }}"
  with_dict:
    user1: /bin/bash
    user2: /bin/zsh
In this example:

with_dict loops over the dictionary and provides both the key (the user name) and value (the shell) to the task.
3. Loop with a Range (loop with range)
You can use loop with a range to iterate a specific number of times.

Example:

yaml
Copy code
- name: Create 5 empty files
  file:
    path: "/tmp/file{{ item }}"
    state: touch
  loop: "{{ range(1, 6) | list }}"
range(1, 6) generates a list of numbers from 1 to 5.
The task will create files like /tmp/file1, /tmp/file2, etc.
4. Loop with a List of Dictionaries
When you need to loop over a list of dictionaries (e.g., a list of users with multiple properties), you can use loop.

Example:

yaml
Copy code
- name: Create users with different settings
  user:
    name: "{{ item.name }}"
    state: present
    shell: "{{ item.shell }}"
  loop:
    - { name: 'user1', shell: '/bin/bash' }
    - { name: 'user2', shell: '/bin/zsh' }
Here, loop iterates over a list of dictionaries, and each dictionary contains the name and shell for each user.

5. Looping Over Files and Directories
Ansible has built-in modules for managing files and directories, and you can use loops with these modules to perform operations on multiple files or directories.

Example:

yaml
Copy code
- name: Create multiple directories
  file:
    path: "/tmp/{{ item }}"
    state: directory
  loop:
    - dir1
    - dir2
    - dir3
This task will create directories /tmp/dir1, /tmp/dir2, and /tmp/dir3.

Looping Syntax: loop vs with_*
Ansible provides different ways to loop over lists or dictionaries, but the newer loop syntax is recommended. It works consistently across all modules, whereas with_items and other with_* options are considered legacy.

Example with loop (Preferred):
yaml
Copy code
- name: Install packages using loop
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - nginx
    - curl
    - git
Example with with_items (Old Style):
yaml
Copy code
- name: Install packages using with_items
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - nginx
    - curl
    - git
The loop syntax offers more flexibility and should be used in modern Ansible playbooks.

Conditional Looping
You can also add conditions within loops using when.

Example:

yaml
Copy code
- name: Install selected packages based on condition
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - nginx
    - curl
    - git
  when: ansible_facts['os_family'] == "Debian"
This task will only install the packages if the target system is running a Debian-based OS.

Break/Continue in Loops
Ansible doesn't have native break or continue statements like in some other programming languages, but you can simulate them using when and failed conditions to control task flow.

Example (simulating continue):

yaml
Copy code
- name: Install packages with condition
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - nginx
    - curl
    - git
  when: item != "curl"
This task will install nginx and git, but skip curl due to the condition.

Recap
Loops make tasks more efficient by avoiding repetition and allowing the handling of multiple items at once.
with_items, with_dict, loop are all used to iterate over a list or dictionary, but loop is the recommended modern syntax.
Conditionals can be used within loops to control which items to act upon.
Range allows for creating repeated tasks a specific number of times.